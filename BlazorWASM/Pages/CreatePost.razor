@page "/CreatePost"
@using System.Security.Claims
@using BlazorWASM.Services
@using HttpClients.ClientInterfaces
@using SharedDomain.DTOs
@inject IPostService postService
@inject IAuthService authService
@inject NavigationManager navMgr
@using System.Threading;

<AuthorizeView>
    <Authorized>
<div class="createPostCard">
    <h3>Create Post</h3>
    
    <label>Title:</label>
    <input name="name" type="text" class="feedback-input" placeholder="Give your post a catchy title!" @bind="postTitle"/>   
    
    <label>Description:</label>
    <textarea name="text" class="feedback-input" placeholder="Describe your problem!" @bind="postDescription"></textarea>
    
    <div class="button-row">
        @if (!string.IsNullOrEmpty(msg) && !isSucceed)
        {
            <div class="error-msg">
                <i class="fa fa-times-circle"></i>
                @msg
            </div>
        }
        @if (!string.IsNullOrEmpty(goodMsg) && isSucceed)
        {
            <div class="success-msg">
                <i class="fa fa-check"></i>
                @goodMsg
            </div>
        }
        <div class="field">
            <button @onclick="Create" class="button-35" role="button">Create</button>
            </div>
    </div>
</div>
</Authorized>
    <NotAuthorized>
        <p>You are not logged in.</p>
        @Redirect()
    </NotAuthorized>
</AuthorizeView>
@code {
    private string postTitle = "";
    private string postDescription = "";
    private string authorUsername = "";
    string userId = "";
    private string color = "";
    private bool isSucceed = false;
    
    
    private string msg = "";
    private string goodMsg = "";
    

    private async Task Redirect()
    {
        navMgr.NavigateTo("/login");
    }
    
    private async Task Create()
    {
        msg = "";
        goodMsg = "";
        
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postDescription))
        {
            msg = "Description cannot be empty!";
            return;
        }
        

        try
        {
            isSucceed = false;
            ClaimsPrincipal context = await authService.GetAuthAsync();
            var claims = context.Identities.First().Claims.ToList();
            string? id = claims?.FirstOrDefault(x => x.Type.Equals("Id", StringComparison.OrdinalIgnoreCase))?.Value;
            PostCreationDto dto = new(int.Parse(id), postTitle, postDescription);
            await postService.CreateAsync(dto);
            isSucceed = true;
            goodMsg = "Post successfully created";
            
            postTitle = "";
            postDescription = "";
            var timer = new Timer(new TimerCallback(_ =>
            {
                navMgr.NavigateTo("/");
            }), null, 2000, 2000);
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
            color = "red";
        }
    }
}


















